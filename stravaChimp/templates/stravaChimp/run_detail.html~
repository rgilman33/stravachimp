<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">  
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="icon" href="http://getbootstrap.com/favicon.ico">
    <title>Run Detail</title>
    <!-- Bootstrap core CSS -->
    <link href="http://getbootstrap.com/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Custom styles for this template -->
    <link href="http://getbootstrap.com/examples/theme/theme.css" rel="stylesheet">    
    <!-- IE10 viewport hack for Surface/desktop Windows 8 bug -->
    <link href="http://getbootstrap.com/assets/css/ie10-viewport-bug-workaround.css" rel="stylesheet">
    <!--<script src="http://getbootstrap.com/assets/js/ie-emulation-modes-warning.js"></script> -->
    
    <link 
        rel="stylesheet" 
        href="http://cdn.leafletjs.com/leaflet-0.7/leaflet.css"
    /> 
    <script
        src="http://cdn.leafletjs.com/leaflet-0.7/leaflet.js">
    </script>
	<!--<script src="http://maps.google.com/maps/api/js?sensor=true"></script>  -->

    <script src="http://d3js.org/d3.v3.min.js"></script>

    <style type="text/css">
        html, body, #map {
          width: 100%;
          height: 100%;
          margin: 0;
          padding: 0;
        }
        
		body {
			background-color: #f0f0f0;
		}
        #dash svg, #container1 svg, #containerH svg, #container3 svg{
			background-color: white;
            outline: #d9d9d9 solid thin;
            /*border:  #d9d9d9 solid thin*/
}
		}

        .stations, .stations svg {
          position: absolute;
        }
        .stations svg {
          width: 60px;
          height: 20px;
          padding-right: 100px;
          font: 10px sans-serif;
        }
        
        .stations circle {
          fill: brown;
          stroke: black;
          stroke-width: 1.5px;}
          
          /*
	    .sidebyside {
		    display: inline-block;
		    width: 49%;
	    }*/
	    
	    .axis path,
        .axis line {
          fill: none;
          stroke: #000;
          shape-rendering: crispEdges;
        }

        .tick line{
            opacity: 0.1;
          }
		
		.point {fill:black;
		        stroke:black;
		        stroke-opacity: .5}
		.point.highlight {fill:red}
		#tooltip {
			position: absolute;
			top: 0;
			left: 0;
			z-index: 10;
			margin: 0;
			padding: 10px;
			width: 15px;
			height: 12px;
			color: black;
			font-family: sans-serif;
			font-size: 12px;
			font-weight: bold;
			text-align: center;
			background-color: rgba(0, 0, 0, 0.0);
			opacity: 0;
			pointer-events: none;
		}
	</style>

  </head>

  <body>    
  <!-- Fixed navbar -->
    <nav class="navbar navbar-default navbar-fixed-top">
      <div class="container">
        <div class="navbar-header">
          <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <a class="navbar-brand" href="#">Bootstrap theme</a>
        </div>
        <div id="navbar" class="navbar-collapse collapse">
          <ul class="nav navbar-nav">
            <li class="active"><a href="{% url 'dashboard' athleteId=athleteId %}">My Dashboard</a></li>
            <li><a href="#about">About</a></li>
          </ul>
        </div><!--/.nav-collapse -->
      </div>
    </nav>
    
    <div class="page-header">
        <h1>Afternoon Run</h1>
    </div>
    
    <div id="tooltip">
    </div>
    
    <div id="dash"><h1></h1>
    </div>
    
    <div id="container1"><h1></h1>
    </div>

    <div class="row">
      <div class="col-md-8" id="map" style='height:600px;width:600px;'>
      </div>
      <div class="col-md-4" id="containerH">
      </div>
      <div id="container3">
    </div> 
      <div id="buttonContainer">
        <button id="reset">reset</button>
      </div>
    </div>
   
    
    
	


  <!-- Site footer -->
  <footer class="footer">
    <p>&copy; 2015 Beans, Inc.</p>
  </footer>

    <!-- Bootstrap core JavaScript
    ================================================== -->
    <!-- Placed at the end of the document so the pages load faster -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
    <script>window.jQuery || document.write('<script src="http://getbootstrap.com/assets/js/vendor/jquery.min.js"><\/script>')</script>
    <script src="http://getbootstrap.com/dist/js/bootstrap.min.js"></script>
    <!-- Just to make our placeholder images work. Don't actually copy the next line! -->
    <script src="http://getbootstrap.com/assets/js/vendor/holder.min.js"></script>
    <!-- IE10 viewport hack for Surface/desktop Windows 8 bug -->
    <script src="http://getbootstrap.com/assets/js/ie10-viewport-bug-workaround.js"></script>
</body>



<script type="text/javascript"> // Begining d3 script
/*
var data = 
[{"latlng":[38.91571,-77.042717],"hr":131.0,"speeds":3.75,"speedDelta3Abs":0.65,"altDeltas":-0.4,"time":4120.0,"distCum":11105.6},{"latlng":[38.915707,-77.042445],"hr":133.0,"speeds":3.95,"speedDelta3Abs":0.1,"altDeltas":-0.4,"time":4126.0,"distCum":11129.3},{"latlng":[38.915702,-77.042289],"hr":136.0,"speeds":4.5,"speedDelta3Abs":1.0333333333,"altDeltas":-0.5,"time":4129.0,"distCum":11142.8},{"latlng":[38.9157,-77.042162],"hr":140.0,"speeds":3.6666666667,"speedDelta3Abs":-0.0833333333,"altDeltas":-0.2,"time":4132.0,"distCum":11153.8},{"latlng":[38.91571,-77.041927],"hr":141.0,"speeds":3.4,"speedDelta3Abs":-0.55,"altDeltas":-0.5,"time":4138.0,"distCum":11174.2},{"latlng":[38.915702,-77.04169],"hr":141.0,"speeds":2.9428571429,"speedDelta3Abs":-1.5571428571,"altDeltas":-0.5,"time":4145.0,"distCum":11194.8},{"latlng":[38.915638,-77.041461],"hr":141.0,"speeds":3.5333333333,"speedDelta3Abs":-0.1333333333,"altDeltas":0.3,"time":4151.0,"distCum":11216.0},{"latlng":[38.915571,-77.041213],"hr":139.0,"speeds":3.7833333333,"speedDelta3Abs":0.3833333333,"altDeltas":-1.0,"time":4157.0,"distCum":11238.7},{"latlng":[38.915566,-77.040979],"hr":139.0,"speeds":3.3833333333,"speedDelta3Abs":0.4404761905,"altDeltas":-0.1,"time":4163.0,"distCum":11259.0},{"latlng":[38.915552,-77.04087],"hr":139.0,"speeds":3.2,"speedDelta3Abs":-0.3333333333,"altDeltas":-0.1,"time":4166.0,"distCum":11268.6},{"latlng":[38.915557,-77.040636],"hr":139.0,"speeds":3.3833333333,"speedDelta3Abs":-0.4,"altDeltas":-0.2,"time":4172.0,"distCum":11288.9},{"latlng":[38.915577,-77.040379],"hr":141.0,"speeds":3.7166666667,"speedDelta3Abs":0.3333333333,"altDeltas":-0.2,"time":4178.0,"distCum":11311.2},{"latlng":[38.915594,-77.040131],"hr":141.0,"speeds":3.5833333333,"speedDelta3Abs":0.3833333333,"altDeltas":-0.2,"time":4184.0,"distCum":11332.7},{"latlng":[38.915605,-77.039894],"hr":141.0,"speeds":3.4166666667,"speedDelta3Abs":0.0333333333,"altDeltas":0.0,"time":4190.0,"distCum":11353.2},{"latlng":[38.91561,-77.039637],"hr":141.0,"speeds":3.7166666667,"speedDelta3Abs":-0.0,"altDeltas":-0.2,"time":4196.0,"distCum":11375.5},{"latlng":[38.915628,-77.03951],"hr":144.0,"speeds":3.7,"speedDelta3Abs":0.1166666667,"altDeltas":0.0,"time":4199.0,"distCum":11386.6},{"latlng":[38.915656,-77.039275],"hr":145.0,"speeds":4.1,"speedDelta3Abs":0.6833333333,"altDeltas":-0.3,"time":4204.0,"distCum":11407.1},{"latlng":[38.915672,-77.039005],"hr":143.0,"speeds":3.9166666667,"speedDelta3Abs":0.2,"altDeltas":0.2,"time":4210.0,"distCum":11430.6},{"latlng":[38.915659,-77.03875],"hr":144.0,"speeds":3.7,"speedDelta3Abs":-0.0,"altDeltas":-0.3,"time":4216.0,"distCum":11452.8},{"latlng":[38.915636,-77.038607],"hr":142.0,"speeds":3.15,"speedDelta3Abs":-0.95,"altDeltas":-0.6,"time":4220.0,"distCum":11465.4},{"latlng":[38.915518,-77.038448],"hr":143.0,"speeds":3.3833333333,"speedDelta3Abs":-0.5333333333,"altDeltas":0.1,"time":4226.0,"distCum":11485.7},{"latlng":[38.915486,-77.038429],"hr":142.0,"speeds":3.9,"speedDelta3Abs":0.2,"altDeltas":-0.2,"time":4227.0,"distCum":11489.6},{"latlng":[38.915451,-77.038426],"hr":143.0,"speeds":3.8,"speedDelta3Abs":0.65,"altDeltas":0.0,"time":4228.0,"distCum":11493.4},{"latlng":[38.915261,-77.038408],"hr":142.0,"speeds":4.24,"speedDelta3Abs":0.8566666667,"altDeltas":-0.1,"time":4233.0,"distCum":11514.6},{"latlng":[38.91507,-77.038359],"hr":144.0,"speeds":3.5833333333,"speedDelta3Abs":-0.3166666667,"altDeltas":0.0,"time":4239.0,"distCum":11536.1},{"latlng":[38.915047,-77.038339],"hr":144.0,"speeds":3.0,"speedDelta3Abs":-0.8,"altDeltas":0.0,"time":4240.0,"distCum":11539.1},{"latlng":[38.91498,-77.038262],"hr":142.0,"speeds":2.525,"speedDelta3Abs":-1.715,"altDeltas":-0.1,"time":4244.0,"distCum":11549.2},{"latlng":[38.914953,-77.038179],"hr":141.0,"speeds":1.3142857143,"speedDelta3Abs":-2.269047619,"altDeltas":0.2,"time":4251.0,"distCum":11558.4},{"latlng":[38.91492,-77.038065],"hr":142.0,"speeds":2.65,"speedDelta3Abs":-0.35,"altDeltas":0.6,"time":4255.0,"distCum":11569.0},{"latlng":[38.914904,-77.037816],"hr":142.0,"speeds":3.5833333333,"speedDelta3Abs":1.0583333333,"altDeltas":-0.7,"time":4261.0,"distCum":11590.5},{"latlng":[38.914914,-77.037705],"hr":142.0,"speeds":3.2333333333,"speedDelta3Abs":1.919047619,"altDeltas":0.4,"time":4264.0,"distCum":11600.2},{"latlng":[38.914913,-77.037653],"hr":143.0,"speeds":2.2,"speedDelta3Abs":-0.45,"altDeltas":0.1,"time":4266.0,"distCum":11604.6},{"latlng":[38.914919,-77.037379],"hr":141.0,"speeds":3.4,"speedDelta3Abs":-0.1833333333,"altDeltas":-0.1,"time":4273.0,"distCum":11628.4},{"latlng":[38.914912,-77.03725],"hr":141.0,"speeds":2.22,"speedDelta3Abs":-1.0133333333,"altDeltas":-0.2,"time":4278.0,"distCum":11639.5},{"latlng":[38.9149,-77.037249],"hr":138.0,"speeds":0.5307692308,"speedDelta3Abs":-1.6692307692,"altDeltas":0.1,"time":4291.0,"distCum":11646.4},{"latlng":[38.914877,-77.037376],"hr":136.0,"speeds":0.63125,"speedDelta3Abs":-2.76875,"altDeltas":0.2,"time":4307.0,"distCum":11656.5},{"latlng":[38.91487,-77.037434],"hr":132.0,"speeds":0.625,"speedDelta3Abs":-1.595,"altDeltas":-0.1,"time":4315.0,"distCum":11661.5},{"latlng":[38.914867,-77.037448],"hr":129.0,"speeds":0.5,"speedDelta3Abs":-0.0307692308,"altDeltas":0.0,"time":4319.0,"distCum":11663.5},{"latlng":[38.914865,-77.037462],"hr":126.0,"speeds":0.2,"speedDelta3Abs":-0.43125,"altDeltas":-0.1,"time":4322.0,"distCum":11664.1},{"latlng":[38.914879,-77.037444],"hr":123.0,"speeds":0.2142857143,"speedDelta3Abs":-0.4107142857,"altDeltas":0.1,"time":4336.0,"distCum":11667.1},{"latlng":[38.914874,-77.037442],"hr":122.0,"speeds":0.1,"speedDelta3Abs":-0.4,"altDeltas":0.0,"time":4341.0,"distCum":11667.6}];
*/
{% block content %}
var data = JSON.parse('{{ r_json | escapejs }}');

var fitline = JSON.parse('{{ fitline_json | escapejs }}');
{% endblock %}
////////////////////////////////////////
//
//       hr-time   and    speed-time

w2 = 400  // hr explorer
h2 = 400

pad = 25

var margin = {top: 20, right: 22, bottom: 25, left: 15},
    w = 960 - margin.left - margin.right,
    h = 200 - margin.top - margin.bottom;
			
/// creating svgs
var svg = d3.select("#container1").append("svg")
    .attr("width", w + margin.left + margin.right)
    .attr("height", h + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")"); 
				
var svg2 = d3.select("#container2")
			.append("svg")
			.attr("width", w)
			.attr("height", h);
			
var svg3 = d3.select("#container3")
			.append("svg")
			.attr("width", w2 + margin.left + margin.right)
            .attr("height", h2 + margin.top + margin.bottom)
          .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
		

var oExtent = [d3.min(data, function(d) {return d.time}), d3.max(data, function(d) {return d.time})]
var mExtent = [d3.min(data, function(d) {return d.time}), d3.max(data, function(d) {return d.time}) /2]	
	
// making clipPath
svg.append("defs").append("clipPath")
    .attr("id", "clip")
  .append("rect")
    .attr("x", margin.left)
    .attr("width", w-margin.left)
    .attr("height", h);	
	
	
// x axis, scale creation (speed-time and hr-time graphs)
timeScale = d3.scale.linear()
            .domain(oExtent)
            .range([margin.left, w]);  
                      
timeAxis = d3.svg.axis()
            .scale(timeScale)
            .outerTickSize(0)
            .orient("bottom");     

svg.append("g")
            .attr("class", "x axis")
            .attr("transform", "translate(0," + h + ")")
            .call(timeAxis);

svg2.append("g")
            .attr("class", "x axis")
            //.attr("transform", "translate(" + pad + ",0)")
            .attr("transform", "translate(0," + (h-pad)+ ")")
            .call(timeAxis);  
                        
   
// y axis (hr) axis, scale creation     
hrScale = d3.scale.linear()
            //.domain([d3.min(data, function(d) {return d.hr}), d3.max(data, function(d) {return d.hr})])
            .domain([45, 200])
            .range([h, 0]);         
  
hrAxis = d3.svg.axis()
            .scale(hrScale)
            .innerTickSize(-w+margin.left)
            .outerTickSize(0)
            .orient("left")
            .ticks(10);            
            
svg.append("g")
    .attr("class", "axis")
    .attr("transform", "translate("+margin.left+",0)")
    .call(hrAxis);  
            
            
// y axis (speed) axis, scale creation
speedScale = d3.scale.linear()
            //.domain([d3.min(data, function(d) {return d.speeds}), d3.max(data, function(d) {return d.speeds})])
            .domain([0, 10])
            .range([h,0]);  
                      
speedAxis = d3.svg.axis()
            .scale(speedScale)
            .innerTickSize(-w)
            .outerTickSize(0)
            .orient("left")
            .ticks(10); 
            
speedAxisR = d3.svg.axis()
            .scale(speedScale)
            .innerTickSize(0)
            .outerTickSize(0)
            .orient("right")
            .ticks(10);     
              
svg.append("g")
    .attr("class", "y axis")
    .attr("transform", "translate("+w+",0)")
    .call(speedAxisR);
                     
svg2.append("g")
    .attr("class", "axis")
    .attr("transform", "translate("+pad+",0)")
    .call(speedAxis);
    

// y axis (hr explorer) axis, scale creation     
hrScale2 = d3.scale.linear()
            .domain([d3.min(data, function(d) {return d.hr})-1, d3.max(data, function(d) {return d.hr})])
            .range([margin.left, w2]);   
                  
hrAxis2 = d3.svg.axis()
            .scale(hrScale2)
            .orient("bottom")
            .ticks(10);            
            
  
    
// x axis (hr explorer) axis, scale creation
speedScale2 = d3.scale.linear()
            //.domain([d3.min(data, function(d) {return d.speeds}), d3.max(data, function(d) {return d.speeds})])
            .domain([-0.1, 7])
            .range([h2, 0]);
                        
speedAxis2 = d3.svg.axis()
            .scale(speedScale2)
            .orient("left");    
            
svg3.append("g")
    .attr("class", "axis")
    .attr("transform", "translate("+margin.left+",0)")
    .call(speedAxis2);
                  
svg3.append("g")
            .attr("class", "x axis")
            .attr("transform", "translate(0," +h2+ ")")
            .call(hrAxis2);
 
  
/////////////////////////////////////////////////////////     
// adding brush
// append before pts to allow tooltips to come through
/////////////////////////////////////////////////////////

var brush = d3.svg.brush()
    .x(timeScale)
    .on("brush", brushmove)
    .on("brushend", redrawChart);
 
function brushmove() {
    extent = brush.extent();
    if (extent[1] - extent[0] > 50) {
        d3.selectAll(".point")       // turning pts inside brush red during highlight
            .filter(function (d) {
            if (extent[0] <= d.time && d.time <= extent[1]) {return true}
            })
        .style("fill", "black")
        //.style("opacity", .5); 
        
        
        d3.selectAll(".point")       // preparing to disappear pts outside of brush
            .classed("kill", function (d) {
            if (extent[0] >= d.time || d.time >= extent[1]) {return true}
            })     }
};

function redrawChart() {          // drawing up new graphs, return ptColor
    extent = brush.extent();
    if (extent[1] - extent[0] > 50) {  // only brushing when brush width exceeds one-day
        
        timeScale.domain(extent); // updating domain to reflect brush
        
        /*
        svg.selectAll(".point") // returning original color following highlight
          .data(data)
          .attr("clip-path", "url(#clip)")
          .attr("cx", function(d) { return timeScale(d.time); })
          .style("fill", ptColor);  
          */
     
        ////////////////////// Line update
        Line.remove();
        LineHr.remove();
        makeLines();
        
 
         
        // update x axis  
        svg.select('.x.axis').call(timeAxis);
        
        // updating pts
        pts1.attr("cx", function(d) { return timeScale(d.time); })
            .attr("cy", function(d) { return hrScale(d.hr); })
            .style("fill", hrPtColor)
            //.style("opacity", ptFillOp)
            .style("stroke-opacity", ptStrOp);
            
        pts2.attr("cx", function(d) { return timeScale(d.time); })
            .attr("cy", function(d) { return speedScale(d.speeds); })
            .style("fill", speedPtColor)
            .style("stroke-opacity", ptStrOp);
        
        // update x axis
        svg2.select('.x.axis').call(timeAxis); 
        
        // HR explorer update
        svg3.selectAll(".point")
            .style("fill", speedPtColor)
            .attr("r", radius);
            
        svg3.selectAll(".kill")  // disappearing pts previously classed "kill"
            .style("fill", "blue")
            .style("opacity", 0.05);  
        
        ///////////////////// Map update    
        svgM.selectAll(".point")
            .style("fill", function(d) {return colorR(d.hr)});
         
        svgM.selectAll(".kill")
            .style("opacity", 0);  
            
         // UPDATE ZOOM FINALLY WORKS !!! THANK JESUS
        bunch = svgM.selectAll(".point")      //
            .filter(function (d) {
            if (extent[0] <= d.time && d.time <= extent[1]) {return true}
            });     
        
        newMaxN = d3.max(bunch[0], function(d) {return d.__data__.LatLng.lat});
        newMaxE = d3.max(bunch[0], function(d) {return d.__data__.LatLng.lng});
        newMaxS = d3.min(bunch[0], function(d) {return d.__data__.LatLng.lat});
        newMaxW = d3.min(bunch[0], function(d) {return d.__data__.LatLng.lng});
        
        var nSw = new L.LatLng(newMaxS, newMaxW);
        var nNe = new L.LatLng(newMaxN, newMaxE);
        var nBounds = [nSw, nNe];
        map.fitBounds(nBounds);	  
        
        
        ///////////////////
        // Dash
        

        segDist = Math.round(d3.max(bunch[0], function(d) {return d.__data__.distCum}) - d3.min(bunch[0], function(d) {return d.__data__.distCum}));        
        segTime = Math.round(d3.max(bunch[0], function(d) {return d.__data__.time}) - d3.min(bunch[0], function(d) {return d.__data__.time}));        
        segAvgHr = Math.round(d3.mean(bunch[0], function(d) {return d.__data__.hr}));        
        segAvgSpeed = Math.round(d3.mean(bunch[0], function(d) {return d.__data__.speeds}));
        segHrDev = Math.round(d3.deviation(bunch[0], function(d) {return d.__data__.hr}));
        segMaxHr = Math.round(d3.max(bunch[0], function(d) {return d.__data__.hr}));
        segMinHr = Math.round(d3.min(bunch[0], function(d) {return d.__data__.hr}));
        
        var r0 = [segTime, segDist, 80, segAvgSpeed, segAvgHr, segMinHr, segMaxHr, segHrDev,2,2,2,2]; // values
        var tt0 = ["Time", "Distance", "Load", "Avg Speed", "Avg HR", "Min HR", "Max HR", "HR Dev","Climb", "Net", "T", "T"];//titles 

        b0.remove();   // removing old "g"   
        b0 = svgD.selectAll("g")  // and adding a new one
                    .data(r0)
                    .enter().append("g")
                    .attr("transform", makeSpacing);
                           
        b0.append("text")
            .attr("x", 0)
            .attr("y", 45)
            .attr("font-family", "Arial Black")
            .attr("font-size", "26px")
            .style("text-anchor", "middle")
            .text(function(d) { return d; });        

        b0.append("text")
            .attr("x", 0)
            .attr("y", 20)
            .attr("font-family", "Arial Black")
            .attr("font-size", "16px")
            .style("text-anchor", "middle")
            .style("fill", "#525252")
            .text(function(d, i) { return tt0[i]; }); 
      

       }; // end if statement
       
       
    d3.selectAll(".brush")      // clearing brush from all graphs
          .call(brush.clear());   
    
};

    
svg.append("g")                 // adding brush to svg
    .attr("class", "brush")
    .call(brush)
    .selectAll("rect")
    .attr("height", h)
    .style("opacity", .1);

svg2.append("g")                // adding brush to svg2
    .attr("class", "brush")
    .call(brush)
    .selectAll("rect")
    .attr("height", h)
    .style("opacity", .1);
    
    

d3.select("#reset")             // Button Resetting to original view
    .on("click", function() {  
        brush.extent(oExtent);  // FINALLY IT WORKS       
        svg.select('.brush')
        .call(brush);      
        redrawChart();
        svg3.selectAll(".point")
            .style("fill", speedPtColor)
            .style("opacity", 1);
        svgM.selectAll(".point")
            .style("fill", function(d) {return colorR(d.hr)})
            .style("opacity", 1);
    } );  
  
/*
timeScale.domain(oExtent);   // initializing brush 
redrawChart(); 
*/



///////////////////////////////////////////////////////   
//    LINES  
///////////////////////////////////////////////////////

function makeLines() {
    speedTimeLine = d3.svg.line()  
        .x(function(d) { return timeScale(d.time) } )
        .y(function(d) { return speedScale(d.speeds) } );
       
    Line = svg.append("path")
      .datum(data)
      .attr("class", "line")
      .attr("clip-path", "url(#clip)")
      .attr("d", speedTimeLine)
      .style("fill", "none")
      .style("stroke-width", "2")
      .style("stroke", "#1b9e77");    

    HrTimeLine = d3.svg.line()  
        .x(function(d) { return timeScale(d.time) } )
        .y(function(d) { return hrScale(d.hr) } );
       
    LineHr = svg.append("path")
      .datum(data)
      .attr("class", "line")
      .attr("clip-path", "url(#clip)")
      .attr("d", HrTimeLine)
      .style("fill", "none")
      .style("stroke-width", "2")
      .style("stroke", "#d95f02"); 
            };
makeLines();  


///////////////////////////////////////////////////
// points
///////////////////////////////////////////////////

var radius = 3
var ptStrOp = 0
var ptFillOp = 0.8
var mapPtFillOp = 1
var mapPtStrOp = 0.2

var altRadius = function(d) {return altRadScale(d.altDeltas)}

var hrPtColor = "#fc8d62"
var speedPtColor = "#66c2a5"
var hrColor = function(d) {return colorR(d.hr)}

var hrExColor = function(d) {return exColor(d.speedDelta3Abs)}


var exColor = d3.scale.linear()
    //.domain([d3.min(data, function(d) {return d.speedDelta3Abs}), 0, d3.max(data, function(d) {return d.speedDelta3Abs})])  
    .domain([-3, 0, 3]) 
    .range(['#66c2a5','#fc8d62','#8da0cb']);


// set color scale here
var color = d3.scale.linear()
    .domain([d3.min(data, function(d) {return d.speedDelta3Abs}), 0, d3.max(data, function(d) {return d.speedDelta3Abs})])
    .range(["red", "yellow", "green"]);
    

// radius acceleration scale
var altRadScale = d3.scale.linear()
    .domain([d3.min(data, function(d) {return d.altDeltas}),0, d3.max(data, function(d) {return d.altDeltas})]) 
    .range([1,4,8]);
 
// hr scale for use on map 
var hrColorRange =['#a50026','#d73027','#f46d43','#fdae61','#a6d96a', '#66bd63','#1a9850','#006837','#006837','#006837','#006837'].reverse()    
var colorR = d3.scale.linear()
    .domain([80,90,100,110,120,130,140,150,160,170,180]) // backwards bc range is backwards
    .range(hrColorRange);
         
   
    // making the hr points here
pts1 = svg.selectAll(".point")
    .data(data)
    .enter().append("circle")
    .attr("clip-path", "url(#clip)")
    .attr("class", "point")
    .attr("clip-path", "url(#clip)")
    .attr("r", radius)
    .attr("cx", function(d) { return timeScale(d.time); })
    .attr("cy", function(d) { return hrScale(d.hr); })
    .style("fill", hrPtColor)
    .style("opacity", ptFillOp)
    .style("stroke-opacity", ptStrOp);

    // making the speed points here
pts2 = svg.selectAll(".point2")
    .data(data)
    .enter().append("circle")
    .attr("class", "point")
    .attr("clip-path", "url(#clip)")
    .attr("r", radius)
    .attr("cx", function(d) { return timeScale(d.time); })
    .attr("cy", function(d) { return speedScale(d.speeds); })
    .style("fill", speedPtColor)
    .style("stroke-opacity", ptStrOp);

  
// making the hr speed explorer points 
pts3 = svg3.selectAll(".point")
    .data(data)
  .enter().append("circle")
    .attr("class", "point")
    //.attr("clip-path", "url(#clip)")
    .attr("r", altRadius)
    .attr("cy", function(d) { return speedScale2(d.speeds); })
    .attr("cx", function(d) { return hrScale2(d.hr); })
    .style("fill", hrExColor)  
  
              
// making fitline

fl = d3.svg.line()  
    .x(function(d) { return hrScale2(d.hr) } )
    .y(function(d) { return speedScale2(d.avgSpeed) } );
   
fitline = svg3.append("path")
  .datum(fitline)
  .attr("class", "line")
  //.attr("clip-path", "url(#clip)")
  .attr("d", fl)
  .style("fill", "none")
  .style("stroke-width", "2")
  .style("stroke", "#252525");

/////////////////////////////////////////////////////
// tooltip
// on mouseover syncing highlights and adding tooltip

d3.selectAll(".point")
    .on("mouseover", function(d) {
        thisTime = d.time
        d3.selectAll(".point")
        .filter(function(d) {
            if (d.time ==thisTime) {return true}
            })
            .classed("highlight", true)
            .transition()
            .duration(100)
            .attr("r", 10)
            
            var x = d3.event.pageX;
            var y = d3.event.pageY;
            text = 'altD: '+d.altDeltas+' speed: '+d.speeds+' hr: '+d.hr+' del3: '+d.speedDelta3Abs+' cadence: '+d.cadence
            d3.select("#tooltip")
				.style("left", x + "px")
				.style("top", y + "px")
				.style("opacity", 1)
				.text(text); 
				

            })
                
    .on("mouseout", function() {
            svg.selectAll(".point")
            .classed("highlight", false)
            .transition()
            .duration(100)
            .attr("r", radius)
            
            svg.selectAll(".point2")
            .classed("highlight", false)
            .transition()
            .duration(100)
            .attr("r", radius)
            
            /*
            svg2.selectAll(".point")
            .classed("highlight", false)
            .style("fill", ptColor)
            .transition()
            .duration(100)
            .attr("r", 4);*/
            
            svgM.selectAll(".point")
            .classed("highlight", false)
            .style("fill", function(d) {return colorR(d.hr)})
            .transition()
            .duration(100)
            .attr("r", radius);
            
            svg3.selectAll(".point")
            .classed("highlight", false)
            .style("fill", function(d) {return speedPtColor})
            .transition()
            .duration(100)
            .attr("r", radius);
            
            d3.select("#tooltip")
                .style("opacity", 0);
         });
         
 
//////////////////////////////////////////////////////////////////////
//
//     Map
//
//////////////////////////////////////////////////////////////////////


var run = data
	
var map = L.map('map').setView([38.91487,-77.037434], 13);
mapLink = 
    '<a href="http://openstreetmap.org">OpenStreetMap</a>';
L.tileLayer(
    'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '&copy; ' + mapLink + ' Contributors',
    maxZoom: 18,
    }).addTo(map);
	
// finding bounds
var maxN = d3.max(run, function(d) {return d.latlng[0]});
var maxE = d3.max(run, function(d) {return d.latlng[1]});
var maxS = d3.min(run, function(d) {return d.latlng[0]});
var maxW = d3.min(run, function(d) {return d.latlng[1]});

var sw = new L.LatLng(maxS, maxW);
var ne = new L.LatLng( maxN, maxE);
var bounds = [sw, ne];
map.fitBounds(bounds);	

/* Initialize the SVG layer */
map._initPathRoot()    

/* We simply pick up the SVG from the map object */
var svgM = d3.select("#map").select("svg"),
g = svgM.append("g");

/* Add a LatLng object to each item in the dataset */
run.forEach(function(d) {
    d.LatLng = new L.LatLng(d.latlng[0],
						    d.latlng[1])
})

var feature = g.selectAll("circle")
    .data(run)
    .enter().append("circle")
    .attr("class", "point")
    .style("stroke", "black")  
    .style("opacity", mapPtFillOp) 
    .style("stroke-opacity", mapPtStrOp) 
    .style("fill", function(d) {return colorR(d.hr)})
    .attr("r", radius);  

/*
feature.filter(function(d) {
        if (d.hr > 150) {return true}
            })
            .attr("r", 20)
            .remove(); */

map.on("viewreset", update);
update();

function update() {
    feature.attr("transform", 
    function(d) { 
	    return "translate("+ 
		    map.latLngToLayerPoint(d.LatLng).x +","+ 
		    map.latLngToLayerPoint(d.LatLng).y +")";
	    }
    )
};

/////////////////////////////////////////////////////
//
//        Dash
//
/////////////////////////////////////////////////////

var dashMarg = {top: 5, right:10, bottom:7, left:10}
var wD = 960
var hD = 60

var segDist = Math.round(d3.max(run, function(d) {return d.distCum}) - d3.min(run, function(d) {return d.distCum}));    
var segTime = Math.round(d3.max(run, function(d) {return d.time}) - d3.min(run, function(d) {return d.time}));
var segAvgHr = Math.round(d3.mean(run, function(d) {return d.hr}));
var segAvgSpeed = Math.round(d3.mean(run, function(d) {return d.speeds}));
var segHrDev = Math.round(d3.deviation(run, function(d) {return d.hr}));
var segMaxHr = Math.round(d3.max(run, function(d) {return d.hr}));
var segMinHr = Math.round(d3.min(run, function(d) {return d.hr}));

// these array will be broken down into rows and columns reading left to right, top to bottom
var r0 = [segTime, segDist, 80, segAvgSpeed, segAvgHr, segMinHr, segMaxHr, segHrDev,2,2,2,2]; // values
var tt0 = ["Time", "Distance", "Load", "Avg Speed", "Avg HR", "Min HR", "Max HR", "HR Dev","Climb", "Net", "T", "T"];//titles

var numRows = 1   // numRows and numCols must multiply to tt0.length
var numCols = 12 

var svgD = d3.select("#dash")
	        .append("svg")
	        .attr("width", wD)
	        .attr("height", hD); 

function makeSpacing(d, i) {return "translate(" + 
                (((i+numCols)%numCols) // normalizer (ie 0, 1, or 2 in this case)
                *((wD-dashMarg.left-dashMarg.right) / numCols ) + dashMarg.left + //space btwn columns
                (((wD-dashMarg.left-dashMarg.right) / numCols )/2) // using center-aligned text, so adding half column width
                ) 
                + ","+
                (Math.trunc(i/numCols)* // normalizer
                ((hD-dashMarg.top-dashMarg.bottom) / numRows)+dashMarg.top ) //space btw rows
                +")"};
           
var b0 = svgD.selectAll("g")  
            .data(r0)
            .enter().append("g")
            .attr("transform", makeSpacing);
                   
b0.append("text")
    .attr("x", 0)
    .attr("y", 45)
    .attr("font-family", "Arial Black")
    .attr("font-size", "26px")
    .style("text-anchor", "middle")
    .text(function(d) { return d; });        

b0.append("text")
    .attr("x", 0)
    .attr("y", 20)
    .attr("font-family", "Arial Black")
    .attr("font-size", "16px")
    .style("text-anchor", "middle")
    .style("fill", "#525252")
    .text(function(d, i) { return tt0[i]; }); 


/////////////////////////////////////////////////////////////
// histogram
//
/////////////////////////////////////////////////////////////

var numBins = 40

var hrs = new Array();
for (i=0; i<data.length; i++) {
    hrs.push(data[i].hr)
};

var values = hrs;

// A formatter for counts.
var formatCount = d3.format(",.0f");

var margin = {top: 10, right: 30, bottom: 30, left: 30},
    width = 400 - margin.left - margin.right,
    height = 150 - margin.top - margin.bottom;

var x = d3.scale.linear()
    .domain([50, 190])
    .range([0, width]);

// Generate a histogram using twenty uniformly-spaced bins.
var dataH = d3.layout.histogram()
    .bins(x.ticks(numBins))
    (values);

var y = d3.scale.linear()
    .domain([0, d3.max(dataH, function(d) { return d.y; })])
    .range([height, 0]);

var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom");

var svgH = d3.select("#containerH").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var bar = svgH.selectAll(".bar")
    .data(dataH)
  .enter().append("g")
    .attr("class", "bar")
    .attr("transform", function(d) { return "translate(" + x(d.x) + "," + y(d.y) + ")"; });

bar.append("rect")
    .attr("x", 1)
    .attr("width", (width/numBins)+2)
    .attr("height", function(d) { return height - y(d.y); })
    .style("fill", function(d) {return colorR(d.x)});
/*
bar.append("text")
    .attr("dy", ".75em")
    .attr("y", 6)
    .attr("x", x(dataH[0].dx) / 2)
    .attr("text-anchor", "middle")
    .text(function(d) { return formatCount(d.y); });
*/
svgH.append("g")
    .attr("class", "x axis")
    .attr("transform", "translate(0," + height + ")")
    .call(xAxis);














/*    GOOGLE MAP ATTEMPT. CAN"T LINK UP WELL TO OTHER DATA
var overlay;
var map;  

function initMap() {
    // Create the Google Map…
    map = new google.maps.Map(d3.select("#map").node(), {
      //zoom: 5,
      //center: new google.maps.LatLng(38.915605,-77.039894),
      mapTypeId: google.maps.MapTypeId.TERRAIN
    });

    // finding bounds
    var maxN = d3.max(data, function(d) {return d.latlng[0]});
    var maxE = d3.max(data, function(d) {return d.latlng[1]});
    var maxS = d3.min(data, function(d) {return d.latlng[0]});
    var maxW = d3.min(data, function(d) {return d.latlng[1]});
    var sw = new google.maps.LatLng(maxS, maxW);
    var ne = new google.maps.LatLng( maxN, maxE);
    var bounds = new google.maps.LatLngBounds(sw, ne);

    map.fitBounds(bounds);

    var colorR = d3.scale.linear()  // color scale
        .domain([80, 190])
        .range(['blue','red']);
        
    // Load the station data. When the data comes back, create an overlay.
    overlay = new google.maps.OverlayView();
    // Add the container when the overlay is added to the map.
    overlay.onAdd = function() {
        var layer = d3.select(this.getPanes().overlayLayer).append("div")
            .attr("class", "stations");
        // Draw each marker as a separate SVG element.
        // We could use a single SVG, but what size would it have?
        overlay.draw = function() {
          var projection = this.getProjection(),
              padding = 10;
              
          var marker = layer.selectAll("svg")
              .data(d3.entries(data))
              .each(transform) // update existing markers
            .enter().append("svg")
              .each(transform)
              .attr("class", "point");
              
          // if brush hasn't been used
          if ((extent[1]-extent[0]) == 0) {
          marker.append("circle")    // keep these r and fill values synced with pts above
              .attr("r", 0)
              //.attr("r", function(d) { return d.value.altDeltas +4 }) // need 'value'
              .attr("cx", padding)
              .attr("cy", padding)
              .style("stroke-opacity", ptStrOp)  // dot opacity
              .style("fill", function(d) {return colorR(d.value.hr)}) // need 'value'
              .filter(function (d) {
                if (oExtent[0] <= d.value.time && d.value.time <= oExtent[1]) {return true}
                })
                    .attr('r', 5)
                        };       
                        
          // if brush HAS been used            
          if ((extent[1]-extent[0]) > 0) {
          marker.append("circle")    // keep these r and fill values synced with pts above
              .attr("r", 0)
              //.attr("r", function(d) { return d.value.altDeltas +4 }) // need 'value'
              .attr("cx", padding)
              .attr("cy", padding)
              .style("stroke-opacity", ptStrOp)  // dot opacity
              .style("fill", function(d) {return colorR(d.value.hr)}) // need 'value'
              .filter(function (d) {
                if (extent[0] <= d.value.time && d.value.time <= extent[1]) {return true}
                })
                    .attr('r', 5)  }; 
                                          
          // Add a label.
          marker.append("text")
              .attr("x", padding + 7)
              .attr("y", padding)
              .attr("dy", ".31em");
              //.text(function(d) { return d.value.hr; });
          function transform(d) {
            d = new google.maps.LatLng(d.value.latlng[0], d.value.latlng[1]);
            d = projection.fromLatLngToDivPixel(d);
            return d3.select(this)
                .style("left", (d.x - padding) + "px")
                .style("top", (d.y - padding) + "px");
                 }
        }; // overlay draw
    }; // overlay on add
    addOverlay();
    }; // init map

// Bind our overlay to the map
function addOverlay() { overlay.setMap(map) };
function removeOverlay() { overlay.setMap(null) };

initMap();

*/

</script>
	
	
</html>





